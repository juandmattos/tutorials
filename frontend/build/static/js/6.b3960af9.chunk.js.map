{"version":3,"sources":["components/ui/ErrorModal.js","components/auth/AuthForm.module.css","components/auth/AuthForm.js","pages/Auth.js"],"names":["ErrorModal","props","onCancel","onClear","header","show","error","footer","onClick","module","exports","AuthForm","useState","isLogin","setIsLogin","isLoading","setIsLoading","setError","history","useHistory","emailInputRef","useRef","passwordInputRef","auth","useContext","AuthContext","submitHandler","event","a","preventDefault","enteredEmail","current","value","enteredPassword","login","email","password","data","userId","token","push","signin","className","styles","LoadingSpinner","asOverlay","onSubmit","control","htmlFor","type","id","required","ref","actions","toggle","prevState","AuthPage"],"mappings":"qGAAA,gCAkBeA,IAbI,SAAAC,GACjB,OACE,cAAC,IAAD,CACEC,SAAUD,EAAME,QAChBC,OAAO,qBACPC,OAAQJ,EAAMK,MACdC,OAAQ,cAAC,IAAD,CAAQC,QAASP,EAAME,QAAvB,kBAJV,SAME,4BAAIF,EAAMK,Y,mBCZhBG,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,yBAAyB,MAAQ,0B,gJC2FnJC,EAnFE,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACdC,EADc,KACLC,EADK,OAEaF,oBAAS,GAFtB,mBAEdG,EAFc,KAEHC,EAFG,OAGKJ,qBAHL,mBAGdN,EAHc,KAGPW,EAHO,KAIfC,EAAUC,cACVC,EAAgBC,mBAChBC,EAAmBD,mBACnBE,EAAOC,qBAAWC,KAElBC,EAAa,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACpBD,EAAME,iBACNb,GAAa,GACPc,EAAeV,EAAcW,QAAQC,MACrCC,EAAkBX,EAAiBS,QAAQC,OAE7CnB,EANgB,0CAQGqB,YAAM,CAAEC,MAAOL,EAAcM,SAAUH,IAR1C,QAQVI,EARU,UAUdd,EAAKW,MAAMG,EAAKC,OAAQD,EAAKE,OAC7BrB,EAAQsB,KAAK,MAXC,kDAchBvB,EAAS,gCAdO,2DAkBGwB,YAAO,CAAEN,MAAOL,EAAcM,SAAUH,IAlB3C,SAkBVI,EAlBU,UAoBdd,EAAKW,MAAMG,EAAKC,OAAQD,EAAKE,OAC7BrB,EAAQsB,KAAK,MArBC,mDAwBhBvB,EAAS,iCAxBO,QA2BpBD,GAAa,GA3BO,kEAAH,sDAkCnB,OACE,eAAC,WAAD,WACE,cAAChB,EAAA,EAAD,CAAYM,MAAOA,EAAOH,QAAS,kBAAMc,EAAS,SAClD,0BAASyB,UAAWC,IAAOpB,KAA3B,UACGR,GAAa,cAAC6B,EAAA,EAAD,CAAgBC,WAAS,IACvC,6BAAKhC,EAAU,QAAU,YACzB,uBAAMiC,SAAUpB,EAAhB,UACE,sBAAKgB,UAAWC,IAAOI,QAAvB,UACE,uBAAOC,QAAQ,QAAf,sBACA,uBAAOC,KAAK,QAAQC,GAAG,QAAQC,UAAQ,EAACC,IAAKhC,OAE/C,sBAAKsB,UAAWC,IAAOI,QAAvB,UACE,uBAAOC,QAAQ,WAAf,yBACA,uBACEC,KAAK,WACLC,GAAG,WACHC,UAAQ,EACRC,IAAK9B,OAGRhB,GAAS,mBAAGoC,UAAWC,IAAOrC,MAArB,SAA6BA,IACvC,sBAAKoC,UAAWC,IAAOU,QAAvB,WACItC,GACA,iCAASF,EAAU,SAAW,kBAE/BE,GAAa,mDACd,wBACEkC,KAAK,SACLP,UAAWC,IAAOW,OAClB9C,QAjCkB,WAC5BM,GAAW,SAACyC,GAAD,OAAgBA,MA6BnB,SAKG1C,EAAU,cAAgB,4BC7E1B2C,UAJE,WACf,OAAO,cAAC,EAAD","file":"static/js/6.b3960af9.chunk.js","sourcesContent":["import React from 'react'\n\nimport Modal from './Modal'\nimport Button from './Button'\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header='An Error Occurred!'\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  )\n}\n\nexport default ErrorModal\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__2ZSKH\",\"control\":\"AuthForm_control__1evQ4\",\"actions\":\"AuthForm_actions__25Vmz\",\"toggle\":\"AuthForm_toggle__1Wxr6\",\"error\":\"AuthForm_error__3E6dB\"};","import { Fragment, useState, useRef, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport LoadingSpinner from '../ui/LoadingSpinner'\nimport ErrorModal from '../ui/ErrorModal'\nimport { AuthContext } from '../../context/auth-context'\nimport { signin, login } from '../../lib/api'\nimport styles from './AuthForm.module.css'\n\nconst AuthForm = () => {\n  const [isLogin, setIsLogin] = useState(true)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState()\n  const history = useHistory()\n  const emailInputRef = useRef()\n  const passwordInputRef = useRef()\n  const auth = useContext(AuthContext)\n\n  const submitHandler = async (event) => {\n    event.preventDefault()\n    setIsLoading(true)\n    const enteredEmail = emailInputRef.current.value\n    const enteredPassword = passwordInputRef.current.value\n\n    if (isLogin) {\n      try {\n        const data = await login({ email: enteredEmail, password: enteredPassword })\n        if (data) {\n          auth.login(data.userId, data.token)\n          history.push('/')\n        }\n      } catch (error) {\n        setError('No se pudo realizar el login')\n      }\n    } else {\n      try {\n        const data = await signin({ email: enteredEmail, password: enteredPassword })\n        if (data) {\n          auth.login(data.userId, data.token)\n          history.push('/')\n        }\n      } catch (error) {\n        setError('No se pudo realizar el signin')\n      }\n    }\n    setIsLoading(false)\n  }\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState)\n  }\n\n  return (\n    <Fragment>\n      <ErrorModal error={error} onClear={() => setError(null)} />\n      <section className={styles.auth}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n        <form onSubmit={submitHandler}>\n          <div className={styles.control}>\n            <label htmlFor='email'>Tu Email</label>\n            <input type='email' id='email' required ref={emailInputRef} />\n          </div>\n          <div className={styles.control}>\n            <label htmlFor='password'>Tu Password</label>\n            <input\n              type='password'\n              id='password'\n              required\n              ref={passwordInputRef}\n            />\n          </div>\n          {error && <p className={styles.error}>{error}</p>}\n          <div className={styles.actions}>\n            {!isLoading && (\n              <button>{isLogin ? 'Entrar' : 'Crear Usuario'}</button>\n            )}\n            {isLoading && <p>Sending request...</p>}\n            <button\n              type='button'\n              className={styles.toggle}\n              onClick={switchAuthModeHandler}\n            >\n              {isLogin ? 'Modo Signup' : 'Modo Login'}\n            </button>\n          </div>\n        </form>\n      </section>\n    </Fragment>\n  )\n}\n\nexport default AuthForm","import AuthForm from '../components/auth/AuthForm'\n\nconst AuthPage = () => {\n  return <AuthForm />\n}\n\nexport default AuthPage\n"],"sourceRoot":""}